"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var gauges_style_bindings_model_1 = require("./gauges-style-bindings-model");
var color_1 = require("tns-core-modules/color");
var GaugesStyleBindingsComponent = (function () {
    function GaugesStyleBindingsComponent() {
        this.model = new gauges_style_bindings_model_1.StyleBindingsModel();
    }
    GaugesStyleBindingsComponent.prototype.ngOnInit = function () {
    };
    GaugesStyleBindingsComponent.prototype.onLoaded = function () {
        var gauge = this.gaugeElement.nativeElement;
        this._titleStyle = gauge.titleStyle;
        this._subtitleStyle = gauge.subtitleStyle;
        var scale = gauge.scales.getItem(0);
        this._scaleStyle = scale.scaleStyle;
        this._firstIndicatorStyle = scale.indicators.getItem(0).indicatorStyle;
        this._secondIndicatorStyle = scale.indicators.getItem(1).indicatorStyle;
        this._needle = scale.indicators.getItem(scale.indicators.length - 1);
        this._needleStyle = this._needle.needleStyle;
    };
    GaugesStyleBindingsComponent.prototype.onUpdate = function () {
        this._needle.value = 136;
        this._titleStyle.textColor = new color_1.Color("DarkRed");
        this._subtitleStyle.textColor = new color_1.Color("Red");
        this._needleStyle.fillColor = new color_1.Color("Red");
        this._needleStyle.circleFillColor = new color_1.Color("Red");
        this._needleStyle.strokeColor = new color_1.Color("DarkGray");
        this._needleStyle.circleStrokeColor = new color_1.Color("DarkGray");
        this._firstIndicatorStyle.fillColor = new color_1.Color("LightGray");
        this._secondIndicatorStyle.fillColor = new color_1.Color("Black");
        this._scaleStyle.lineColor = new color_1.Color("SlateGray");
        this._scaleStyle.labelsColor = new color_1.Color("DarkRed");
    };
    GaugesStyleBindingsComponent.prototype.onReset = function () {
        this.model.onReset();
        this._needle.value = this.model.needleValue;
        this._titleStyle.textColor = this.model.titleTextColor;
        this._subtitleStyle.textColor = this.model.subtitleTextColor;
        this._needleStyle.fillColor = this.model.fillColor;
        this._needleStyle.circleFillColor = this.model.fillColor;
        this._needleStyle.strokeColor = this.model.strokeColor;
        this._needleStyle.circleStrokeColor = this.model.strokeColor;
        this._firstIndicatorStyle.fillColor = this.model.firstColor;
        this._secondIndicatorStyle.fillColor = this.model.secondColor;
        this._scaleStyle.lineColor = this.model.lineColor;
        this._scaleStyle.labelsColor = this.model.labelsColor;
    };
    __decorate([
        core_1.ViewChild("myGauge"),
        __metadata("design:type", core_1.ElementRef)
    ], GaugesStyleBindingsComponent.prototype, "gaugeElement", void 0);
    GaugesStyleBindingsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "tk-gauges-style-bindings",
            templateUrl: "gauges-style-bindings.component.html",
            styleUrls: ["gauges-style-bindings.component.css"]
        }),
        __metadata("design:paramtypes", [])
    ], GaugesStyleBindingsComponent);
    return GaugesStyleBindingsComponent;
}());
exports.GaugesStyleBindingsComponent = GaugesStyleBindingsComponent;
//# sourceMappingURL=data:application/json;base64,